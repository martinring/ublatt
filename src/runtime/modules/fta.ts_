// import { Exercise, ExerciseType } from '../Types';
// import { shapes, dia, layout, elementTools } from 'jointjs';
// import FTABoundary from  '../joint.elementTools.fta';
// import '../joint.shapes.fta'


// export default class FTA implements ExerciseType {
//     make(elem: Element, name: string): Exercise {
//         var fta = shapes.fta;
        
//         var graph = new dia.Graph;
    
//         var paper = new dia.Paper({
//             el: elem,
//             width: 900,
//             height: 800,
//             model: graph,
//             defaultConnectionPoint: { name: 'boundary', args: { extrapolate: true }},
//             defaultConnector: { name: 'rounded' },
//             defaultRouter: { name: 'orthogonal' },
//             async: true,
//             interactive: false,
//             frozen: true,
//             sorting: dia.Paper.sorting.APPROX
//         });
    
//         paper.on({
//             'element:mouseenter': function(elementView) {
//                 var tools = new dia.ToolsView({
//                     tools: [FTABoundary.factory()]
//                 });
//                 elementView.addTools(tools);
//             },
//             'element:mouseleave': function(elementView) {
//                 elementView.removeTools();
//             },
//             'element:gate:click': function(elementView) {
//                 var element = elementView.model;
//                 var gateType = element.gate();
//                 var gateTypes = Object.keys(element.gateTypes);
//                 var index = gateTypes.indexOf(gateType);
//                 var newIndex = (index + 1) % gateTypes.length;
//                 element.gate(gateTypes[newIndex]);
//             }
//         });
    
//         function doLayout(graph: joint.dia.Graph) {
//             var autoLayoutElements: joint.dia.Element[] = [];
//             var manualLayoutElements: joint.dia.Element[] = [];
//             graph.getElements().forEach(function(el) {
//                 if (el.get('type') === 'fta.ConditioningEvent') {
//                     manualLayoutElements.push(el);
//                 } else {
//                     autoLayoutElements.push(el);
//                 }
//             });
//             // Automatic Layout
//             layout.DirectedGraph.layout(graph.getSubgraph(autoLayoutElements), {
//                 setVertices: true,
//                 marginX: 20,
//                 marginY: 20
//             });
//             // Manual Layout
//             manualLayoutElements.forEach(function(el) {
//                 var neighbor = graph.getNeighbors(el, { inbound: true })[0];
//                 if (!neighbor) return;
//                 var neighborPosition = neighbor.getBBox().bottomRight();
//                 el.position(neighborPosition.x + 20, neighborPosition.y - el.size().height / 2 - 20);
//             });
//         }
    
//         // Original FTA Diagram: https://www.edrawsoft.com/templates/pdf/scaffolding-fall-fault-tree.pdf
    
//         var events = [
//             shapes.fta.IntermediateEvent.create('Fall from Scaffolding').gate('inhibit'),
//             shapes.fta.IntermediateEvent.create('Fall from the Scaffolding', 'and').gate('and'),
//             shapes.fta.IntermediateEvent.create('Safety Belt Not Working', 'or').gate('or'),
//             shapes.fta.IntermediateEvent.create('Fall By Accident', 'or').gate('or'),
//             shapes.fta.IntermediateEvent.create('Broken By Equipment', 'or').gate('or'),
//             shapes.fta.IntermediateEvent.create('Did not Wear Safety Belt', 'or').gate('or'),
//             shapes.fta.UndevelopedEvent.create('Slip and Fall'),
//             shapes.fta.UndevelopedEvent.create('Lose Balance'),
//             shapes.fta.UndevelopedEvent.create('Upholder Broken'),
//             shapes.fta.BasicEvent.create('Safety Belt Broken'),
//             shapes.fta.BasicEvent.create('Forgot to Wear'),
//             shapes.fta.ExternalEvent.create('Take off When Walking'),
//             shapes.fta.ConditioningEvent.create('Height and Ground Condition')
//         ];
    
//         var links = [
//             shapes.fta.Link.create(events[0], events[1]),
//             shapes.fta.Link.create(events[1], events[2]),
//             shapes.fta.Link.create(events[1], events[3]),
//             shapes.fta.Link.create(events[2], events[4]),
//             shapes.fta.Link.create(events[2], events[5]),
//             shapes.fta.Link.create(events[3], events[6]),
//             shapes.fta.Link.create(events[3], events[7]),
//             shapes.fta.Link.create(events[4], events[8]),
//             shapes.fta.Link.create(events[4], events[9]),
//             shapes.fta.Link.create(events[5], events[10]),
//             shapes.fta.Link.create(events[5], events[11]),
//             shapes.fta.Link.create(events[0], events[12])
//         ];
    
//         graph.resetCells((events as joint.dia.Cell[]).concat(links));
    
//         doLayout(graph);
    
//         paper.unfreeze();
    
//         return {    
//             get() { return null },
//             set(x: any) {}
//         }
//     }
// }